import t from './types'

// Corrected implementation of babel `isType` that works with node types
// added by `definePluginType`.
export isType(nodeType, targetType) ->
  if nodeType === targetType: return true

  aliases = t.FLIPPED_ALIAS_KEYS[targetType]
  if aliases:
    for elem e in aliases: if nodeType === e: return true

  false

// XXX: get this from somewhere else, does lodash have it?
shallowEqual(objA, objB) ->
  if objA === objB: return true

  if (typeof objA !== 'object') or (objA === null) or (typeof objB !== 'object') or (objB === null):
    return false

  keysA = Object.keys(objA)
  keysB = Object.keys(objB)

  if keysA.length !== keysB.length: return false

  bHasOwnProperty = Object.prototype.hasOwnProperty.bind(objB)
  for elem key in keysA:
    if (not bHasOwnProperty(key)) or (objA[key] !== objB[key]): return false

  true

export default is(type: string, node: Object, opts?: Object): boolean ->
  if not node: return false
  if not isType(node.type, type): return false

  if opts?: shallowEqual(node, opts) else: true

// Flipped for use with lightscript ~ operator
export isa(node: Object, type: string, opts?: Object): boolean ->
  if not node: return false
  if not isType(node.type, type): return false

  if opts?: shallowEqual(node, opts) else: true
