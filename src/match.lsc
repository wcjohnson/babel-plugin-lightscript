import t from './types'
import { toBlockStatement } from './blocks'
import { isa } from './is'
import { undeclaredRef } from './ref'
import { matchesDestructuringPattern, accessors, isNonEmptyPattern } from './destructure'
import { createAndExpression as And, createOrExpression as Or } from './logical'
import { runtime } from './runtime'
import { checkFalsePositiveReference } from './variables'

import { getLoc, placeAtLoc as atLoc, placeAtNode as atNode, getSurroundingLoc, span, traverse, placeTreeAtLocWhenUnplaced as allAtLoc } from 'ast-loc-utils'

isUndefined(node) ->
  node.type == "Identifier" and node.name == "undefined"

isSignedNumber(node) ->
  node.type == "UnaryExpression" and
  (node.operator == "+" or node.operator == "-") and
  node.argument.type == "NumericLiteral"

transformGuardId(idPath, bindingAccessors) ->
  { node } = idPath
  if node._guardWasTransformed: return // Prevent infinite recursion

  if bindingAccessors[node.name]:
    loc = node~getLoc()
    replacement = bindingAccessors[node.name]~t.cloneDeep()
    traverse(replacement, (n) ->
      // Prevent infinite recursion
      if n.type == "Identifier": n._guardWasTransformed = true
      n~atLoc(loc)
    )
    idPath.replaceWith(replacement)

transformInnerGuard(mtch, path, bindingAccessors) ->
  path.traverse({
    ReferencedIdentifier(idPath): void ->
      if not checkFalsePositiveReference(idPath):
        transformGuardId(idPath, bindingAccessors)
  })
  path.node

transformPredicate(mtch, path) ->
  { discriminantRef } = mtch
  path.traverse({
    MatchPlaceholderExpression(phPath) -> phPath.replaceWith(discriminantRef)
  })
  path.node

isStrictEqualityLiteral(node) ->
  node~isSignedNumber() or
  node~isUndefined() or
  (node~isa("Literal") and (not node~isa("RegExpLiteral")))

isPredicate(node) ->
  node~isa("CallExpression")

transformAtom(mtch, path) ->
  { discriminantRef } = mtch
  { node } = path

  match node:
    | ~isa("LogicalExpression"):
      node.left = mtch~transformAtom(path.get("left"))
      node.right = mtch~transformAtom(path.get("right"))
      node
    | ~isa("UnaryExpression") as { operator } if operator == "!":
      node.argument = mtch~transformAtom(path.get("argument"))
      node
    | ~isStrictEqualityLiteral():
      t.binaryExpression("===", discriminantRef, node)~atNode(node)
    | ~isPredicate():
      mtch~transformPredicate(path)
    | else:
      t.callExpression(
        runtime('isMatch')~t.clone()~atNode(node)
        [ node, discriminantRef ]
      )~atNode(node)

transformAtoms(mtch, atomPaths) ->
  Or([for elem atomPath in atomPaths: mtch~transformAtom(atomPath)])

transformMatchTest(mtch, casePath) ->
  { outerGuard, atoms, binding, assertive, innerGuard } = casePath.node
  { discriminantRef } = mtch

  And([
    case outerGuard: outerGuard
    case atoms and atoms.length > 0:
      mtch~transformAtoms(casePath.get("atoms"))
    case binding and assertive:
      discriminantRef~matchesDestructuringPattern(binding)
    case innerGuard:
      if binding:
        // Transform referenced identifiers in the inner guard into accessors
        // into the matched pattern.
        const bindingAccessors = {}
        binding~accessors(discriminantRef, bindingAccessors)
        mtch~transformInnerGuard(casePath.get("innerGuard"), bindingAccessors)
      else:
        innerGuard
  ])

transformBoundConsequent({discriminantRef, isLinter}, binding, consequent, innerGuard) ->
  block = toBlockStatement(consequent)

  // Linter: duplicate innerGuard inside consequent to quiet noUnusedVars errors.
  if isLinter and innerGuard:
    block.body.unshift(
      t.ifStatement(
        innerGuard~t.cloneDeep(),
        t.expressionStatement(t.booleanLiteral(true))
      )~allAtLoc(getLoc(innerGuard))
    )

  block.body.unshift(
    t.variableDeclaration("const", [
      t.variableDeclarator(binding, discriminantRef)~atNode(binding)
    ])~atNode(binding)
  )
  block

transformMatchConsequent(mtch, casePath) ->
  { binding, consequent, innerGuard } = casePath.node
  if binding and binding~isNonEmptyPattern():
    mtch~transformBoundConsequent(binding, consequent, innerGuard)
  else:
    consequent~toBlockStatement()

transformMatchCase(mtch, casePath) ->
  c = casePath.node
  {
    consequent: mtch~transformMatchConsequent(casePath)
    test: if c.outerGuard?.type != "MatchElse": mtch~transformMatchTest(casePath)
  }

transformMatchCases(mtch, [casePath, ...rest]) ->
  c = casePath.node
  { test, consequent } = mtch~transformMatchCase(casePath)

  if rest.length > 0:
    loc = getSurroundingLoc([c, mtch.lastCase])
    t.ifStatement(test, consequent, mtch~transformMatchCases(rest))~atLoc(loc)
  elif test:
    t.ifStatement(test, consequent)~atNode(c)
  else:
    consequent

// Computed values needed in recursive descent.
getMatchInfo(path, discriminantRef, isLinter) ->
  { node } = path
  {
    path, node, discriminantRef
    // Track last case for source map positioning
    lastCase: node.cases[node.cases.length - 1]
    isLinter
  }

export transformMatchExpression(path, isLinter) ->
  { node } = path

  argRef = path.scope.generateUidIdentifier("it")~atLoc(getLoc(node)~span(1))
  matchBody = getMatchInfo(path, argRef, isLinter)~transformMatchCases(path.get("cases"))

  iife = t.callExpression(
    t.arrowFunctionExpression(
      [argRef], t.blockStatement([matchBody])~atNode(node)
    )~atNode(node)
    [node.discriminant]
  )~atNode(node)

  path.replaceWith(iife)

export transformMatchStatement(path, isLinter) ->
  { discriminant } = path.node;

  { ref, declarator, isComplex } = undeclaredRef(path, discriminant, "it")
  if isComplex:
    path.insertBefore(
      t.variableDeclaration("const", [declarator])~atNode(declarator)
    )

  path.replaceWith(
    getMatchInfo(path, ref, isLinter)~transformMatchCases(path.get("cases"))
  )
