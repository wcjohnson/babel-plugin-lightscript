// Perform non-semantic AST transformations like ensuring function bodies
// are blocks, etc.
import { isNamedArrowFunction } from '../functions'
import { toBlockStatement } from '../blocks'
import { isa } from '../is'
import { ensureBlockArrowFunctionExpression } from '../functions'

export fixAst(programPath) ->
  programPath.traverse({
    Method(path): void ->
      { node } = path
      if isNamedArrowFunction(node):
        node.body = toBlockStatement(node.body)
        path.replaceWith(node)

    MemberExpression(path): void ->
      if path.node.optional and path.parent~isa("ArrowFunctionExpression"):
        path.parentPath~ensureBlockArrowFunctionExpression()
  })
