// Parse leading configuration directives from a LightScript program.
//
// XXX: Uses somewhat-hackish regular expression parsing. May be possible to
// get Babylon to do a simple parsing pass to get these more cleanly.

eatFluff(code) ->
  now code = code.trim()
  matches = code.match(/^(?:\/\/[^\r\n]*\r?\n?\s*)+([^]*)$/)
  if matches: matches[1] else:
    lcMatches = code.match(/^(?:\/\*[^]*?\*\/\s*)+([^]*)$/)
    if lcMatches: lcMatches[1] else: code

eatDirective(code, directives) ->
  now code = code.trim()
  matches = code.match(/^'((?:[^'\\]|\\.)*)'\s*;?\s*([^]*)$/)
  if matches:
    directives.push(matches[1])
    matches[2]
  else:
    dqMatches = code.match(/^"((?:[^"\\]|\\.)*)"\s*;?\s*([^]*)$/)
    if dqMatches:
      directives.push(dqMatches[1])
      dqMatches[2]
    else:
      code

getDirectives(code) ->
  directives = []
  let before = code, after
  // eslint-disable-next-line no-constant-condition
  while true:
    now after = eatDirective(eatFluff(before), directives)
    if after == before: break
    now before = after
  directives

getClauseOptions(opts, clause) ->
  now clause = clause.split(':')
  if clause.length == 2:
    opt = clause[0].trim()
    val = clause[1].trim()
    if opt.length and val.length:
      try:
        opts[opt] = JSON.parse(val)
      catch err:
        return
  elif clause.length == 1:
    opt = clause[0].trim()
    if opt.length: opts[opt] = true

getWithOptions(opts, wc) ->
  clauses = wc.split(',')
  for elem clause in clauses:
    getClauseOptions(opts, clause)

export default parseConfigurationDirectives(code) ->
  result = {}
  directives = getDirectives(code)
  for elem directive in directives:
    matches = directive.match(/^use \@oigroup\/lightscript\s*(?:with ([^]*))?$/)
    if matches:
      result.isLightScript = true
      if matches[1]: getWithOptions(result, matches[1])

  result
