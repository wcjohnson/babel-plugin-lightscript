import t from './types'
import { placeAtNode as atNode } from 'ast-loc-utils'
import { getCompilerState } from './compilerState'

inlinedOperator = {
  looseEq: (args) => t.binaryExpression("==", args[0], args[1])
  looseNotEq: (args) => t.binaryExpression("!=", args[0], args[1])
  bitwiseNot: (args) => t.unaryExpression("~", args[0])
  bitwiseAnd: (args) => t.binaryExpression("&", args[0], args[1])
  bitwiseOr: (args) => t.binaryExpression("|", args[0], args[1])
  bitwiseXor: (args) => t.binaryExpression("^", args[0], args[1])
  bitwiseLeftShift: (args) => t.binaryExpression("<<", args[0], args[1])
  bitwiseRightShift: (args) => t.binaryExpression(">>", args[0], args[1])
  bitwiseZeroFillRightShift: (args) => t.binaryExpression(">>>", args[0], args[1])
}

export getInlinedOperatorsEnabled(opts) ->
  not ((opts.stdlib === false) or (typeof opts.stdlib === "object" && opts.stdlib.lightscript === false))

export replaceWithInlinedOperator(path, callee, args) ->
  if(
    !(getCompilerState().inlinedOperatorsEnabled) or
    callee.type !== "Identifier"
  ): return false
  name = callee.name
  if (!inlinedOperator[name] || path.scope.hasBinding(name) ) return false
  path.replaceWith(inlinedOperator[name](args)~atNode(path.node))
  return true
