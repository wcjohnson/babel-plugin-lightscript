import { preParseInitialization } from './config'
import findBabelOptionsForPlugin from './util/findBabelOptionsForPlugin'
import { createCompilerState, preCompileInitialization, postprocess } from './state/compilerState'

import firstPass from './visitors/firstPass'
import secondPass from './visitors/secondPass'
import thirdPass from './visitors/thirdPass'
import mainPass from './visitors/main'

export default LightScript(babel) ->
  plugin = {
    manipulateOptions(opts, parserOpts, file) ->
      // manipulateOptions is called very early in the Babel processing chain.
      // It doesn't get an opportunity to see the configuration options for the
      // plugin being run (without a workaround) nor does it get an
      // opportunity to see the code that will be compiled.
      //
      // This rules out things like parsing configuration directives from the
      // top of a JS file to manipulate parsing and compiling options.
      //
      // To remedy this, we monkey patch so that we can do initialization work
      // after the code is read, but before the parser runs.
      //
      // Relevant Babel code:
      // https://github.com/babel/babel/blob/4e50b2d9d9c376cee7a2cbf56553fe5b982ea53c/packages/babel-core/src/transformation/file/index.js#L63
      // https://github.com/babel/babel/blob/4e50b2d9d9c376cee7a2cbf56553fe5b982ea53c/packages/babel-core/src/transformation/file/index.js#L483
      origAddCode = file.addCode

      file.addCode(code) ->
        origAddCode.call(this, code)
        pluginOpts = findBabelOptionsForPlugin(this.opts, plugin)

        compiler = createCompilerState(babel)
        this.lscCompiler = compiler
        compiler~preParseInitialization(this, pluginOpts)
        return

    visitor: {
      // The compiler's main loop is a Program visitor.
      Program(path, state): void ->
        // Skip non-LightScript code
        if not state.file.isLightScript: return

        // Obtain compiler state created during early processing
        compiler = state.file.lscCompiler

        ////////// Initialize compilation run
        compiler~preCompileInitialization(path)

        ////////// AST visitation and transformation
        // First pass: Perform basic ast fixups (block bodies, etc)
        compiler~firstPass(path)
        // Second pass: placeholders, comprehensions
        compiler~secondPass(path)
        // Third pass: transform optional chains
        compiler~thirdPass(path)
        // Main ast visitor
        compiler~mainPass(path)

        ////////// Post-processing
        // Fix up loose ends like adding `import` statements
        compiler~postprocess()
    }
  }
