import { isa } from './is'
import t from './types'

import getLoc from "ast-loc-utils/lib/getLoc"
import buildAtLoc from "ast-loc-utils/lib/buildAtLoc"
import placeAtLoc from 'ast-loc-utils/lib/placeAtLoc'
import span from 'ast-loc-utils/lib/span'

export isSimple(refTarget) ->
  refTarget~isa("Identifier") or
  refTarget~isa("Super") or
  refTarget~isa("ThisExpression")

// Hoist a ref up to the enclosing scope if needed.
export hoistRef(path, refTarget, varName = "ref") ->
  if refTarget~isSimple():
    { ref: refTarget, assign: refTarget, isComplex: false }
  else:
    ref = path.scope.generateDeclaredUidIdentifier(varName)
    loc = getLoc(refTarget)
    placeAtLoc(ref, span(loc, 1))
    {
      ref
      assign: buildAtLoc(loc, t.assignmentExpression, "=", ref, refTarget)
      isComplex: true
    }

// Create a variable declarator for a ref in the enclosing scope, if
// needed
export undeclaredRef(path, refTarget, varName = "ref") ->
  if refTarget~isSimple():
    { ref: refTarget, declarator: null, isComplex: false }
  else:
    ref = path.scope.generateUidIdentifier(varName)
    loc = getLoc(refTarget)
    placeAtLoc(ref, span(loc, 1))
    {
      ref
      declarator: buildAtLoc(loc, t.variableDeclarator, ref, refTarget)
      isComplex: true
    }
