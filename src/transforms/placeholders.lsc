import t from '../types'

isIndexedPlaceholderPath(phPath) -> phPath.node.index?
isSpreadPlaceholderPath(phPath) -> phPath.parentPath?.node.type == "SpreadElement"
isNonIndexedPlaceholderPath(phPath) -> (not phPath.node.index?) and (not phPath~isSpreadPlaceholderPath())

registerPlaceholder(functions, path, programPath) ->
  fnPath = path.getFunctionParent()
  if fnPath == programPath || !fnPath.node || !fnPath.node.params:
    throw path.buildCodeFrameError("Placeholders cannot be used outside functions.")

  if fnPath.node.params.length:
    throw path.buildCodeFrameError("Placeholders cannot be used in functions with arguments.")

  if path.parentPath?.node?.type == "SpreadElement":
    if path.node?.index?:
      throw path.buildCodeFrameError("Cannot use indices with spread placeholders.")

  let fnInfo = functions.get(fnPath)
  if fnInfo:
    fnInfo.placeholders.push(path)
  else:
    functions.set(fnPath, { functionPath: fnPath, placeholders: [ path ] })

liftPlaceholders(fnPath, phPaths) ->
  // Collate placeholders
  ixPhPaths = phPaths.filter(isIndexedPlaceholderPath)
  nixPhPaths = phPaths.filter(isNonIndexedPlaceholderPath)
  spreadPhPaths = phPaths.filter(isSpreadPlaceholderPath)

  if ixPhPaths.length > 0 and nixPhPaths.length > 0:
    throw fnPath.buildCodeFrameError("Cannot mix indexed and non-indexed placeholders in a function.")

  // Formulate args
  args = []
  let restArg = undefined
  maxArg = if ixPhPaths.length > 0:
    // Indexed case
    Math.max(...ixPhPaths.map(x -> x.node.index)) + 1
  else if nixPhPaths.length > 0: 1
  else: 0
  // Generate unique identifiers for args
  for let i = 0; i < maxArg; i++: args.push(fnPath.scope.generateUidIdentifier("arg"))
  if spreadPhPaths.length > 0:
    now restArg = fnPath.scope.generateUidIdentifier("arg")
    args.push(t.restElement(restArg))

  // Replace placeholders with references to args
  for elem phPath in nixPhPaths: phPath.replaceWith(args[0])
  for elem phPath in ixPhPaths: phPath.replaceWith(args[phPath.node.index])
  for elem phPath in spreadPhPaths: phPath.replaceWith(restArg)

  // Replace function definition arg list
  fnNode = fnPath.node
  fnNode.params = args
  fnPath.replaceWith(fnNode)

// Collect all functions with placeholders into a Map, one entry per function
findFunctionsWithPlaceholders(programPath) ->
  fns = new Map()
  programPath.traverse({
    PlaceholderExpression(path): void ->
      registerPlaceholder(fns, path, programPath)
  })
  fns

export transformPlaceholders(programPath) ->
  fns = programPath~findFunctionsWithPlaceholders()
  fns.forEach( fnInfo ->
    fnInfo.functionPath~liftPlaceholders(fnInfo.placeholders)
  )
