import t, { isa } from '../types'
import { transformTails } from '../helpers/tails'
import { toStatement } from '../helpers/blocks'

import { getLoc, placeAtLoc as atLoc, placeAtNode as atNode, getSurroundingLoc, span, placeTreeAtLocWhenUnplaced as allAtLoc } from 'ast-loc-utils'

validateComprehensionBody(path) ->
  path.traverse({
    noScope: true

    Function(path): void -> path.skip()

    AwaitExpression(awaitPath) ->
      throw awaitPath.buildCodeFrameError(
        "`await` is not allowed within Comprehensions; " +
        "instead, await the Comprehension."
      )

    YieldExpression(yieldPath) ->
      throw yieldPath.buildCodeFrameError("`yield` is not allowed within Comprehensions.")

    ReturnStatement(returnPath) ->
      throw returnPath.buildCodeFrameError("`return` is not allowed within Comprehensions.");
  })

iife(body, id, initializer) ->
  loc = body~getSurroundingLoc()

  body.unshift(t.variableDeclaration("const",
    [t.variableDeclarator(id, initializer)~atNode(id)]
  )~atNode(id))
  body.push(t.returnStatement(id)~atLoc(loc~span(-1)))

  t.callExpression(
    t.arrowFunctionExpression([], t.blockStatement(body)~atLoc(loc))~atLoc(loc)
    []
  )~atLoc(loc)

isSimpleObject(objExpr) ->
  objExpr.properties?.length == 1 and
  (not objExpr~isa("ObjectComprehension")) and
  objExpr.properties[0].type == "ObjectProperty" and
  (not objExpr.properties[0].decorators?.length)

retailObject(info, path, id, transformPathName, returnPathName) ->
  transformPath = path.get(transformPathName)
  validateComprehensionBody(transformPath)
  let foundOne = false
  transformTails(
    transformPath
    true
    false
    (expr, tailPath) ->
      if info.isLegacy:
        if (
          expr.type !== "SequenceExpression" or
          expr.expressions.length !== 2
        ):
          throw tailPath.buildCodeFrameError("Object comprehensions must end" +
          " with a (key, value) pair.")

        now foundOne = true
        [ keyExpr, valExpr ] = expr.expressions

        return t.assignmentExpression("=",
          t.memberExpression(id, keyExpr, true)~atNode(expr),
          valExpr
        )~atNode(expr)

      if not expr~isa("ObjectExpression"):
        throw tailPath.buildCodeFrameError("Object comprehensions must end with an object expression.")

      now foundOne = true

      if expr~isSimpleObject():
        // Simple object case: { [k]: v } --> obj[k] = v
        { properties: [prop] } = expr
        t.assignmentExpression("=",
          t.memberExpression(id, prop.key, prop.computed)~atNode(expr),
          prop.value
        )~atNode(expr)
      else:
        // Complex object case: { ... } -> Object.assign(obj, { ... })
        t.callExpression(
          t.memberExpression(
            t.identifier("Object")
            t.identifier("assign")
          )~allAtLoc(expr~getLoc())
          [id, expr]
        )~atNode(expr)
  )

  if not foundOne:
    throw path.buildCodeFrameError("Object comprehensions must end with an object expression.")

  path.get(returnPathName).node

retailArray(info, path, id, transformPathName, returnPathName) ->
  transformPath = path.get(transformPathName)
  validateComprehensionBody(transformPath)
  let foundOne = false
  transformTails(
    transformPath
    true
    false
    (expr) ->
      now foundOne = true
      t.callExpression(
        t.memberExpression(id, t.identifier("push")~atNode(expr))~atNode(expr)
        [expr]
      )~atNode(expr)

      // XXX: below code is for allowing ArrayExpressions in tail position
      // if not expr~isa("ArrayExpression"):
      //   throw tailPath.buildCodeFrameError("Array comprehensions must end with an array expression.")

      // t.callExpression(
      //   t.memberExpression(id, t.identifier("push")~atNode(expr))~atNode(expr)
      //   if expr.elements?.length == 1 and (not expr~isa("ArrayComprehension")):
      //     // Shortcut for simple array exprs: just array.push the single entry.
      //     [expr.elements[0]]
      //   else:
      //     // ES6-spread the tail array onto the base array
      //     [t.spreadElement(expr)~atNode(expr)]
      // )~atNode(expr)
  )

  if not foundOne:
    throw path.buildCodeFrameError("Array comprehensions must end with an expression.")

  path.get(returnPathName).node

transformLoop(info, path, ref, stmts) ->
  if info.isObject:
    stmts.push(retailObject(info, path, ref, "loop.body", "loop"))
  else:
    stmts.push(retailArray(info, path, ref, "loop.body", "loop"))

transformCase(info, path, ref, stmts) ->
  if info.isObject:
    stmts.push(retailObject(info, path, ref, "conditional", "conditional"))
  else:
    stmts.push(retailArray(info, path, ref, "conditional", "conditional"))

pushBundle(info, stmts, ref, bundle) ->
  { isObject } = info
  if isObject:
    // _ref.k1 = v1; _ref.k2 = v2; ...
    for elem property in bundle:
      loc = property~getLoc()
      stmts.push(
        t.assignmentExpression("="
          t.memberExpression(ref, property.key, property.computed)~atLoc(loc)
          property.value
        )~atLoc(loc)~toStatement()
      )
  else:
    loc = getSurroundingLoc(bundle)
    // _ref.push(bundle...)
    stmts.push(
      t.callExpression(
        t.memberExpression(ref, t.identifier("push")~atLoc(loc))~atLoc(loc)
        bundle
      )~atLoc(loc)~toStatement()
    )

export transformComprehension(info) ->
  { path, isObject } = info
  { node } = path
  elements = if isObject: node.properties else: node.elements
  nodeKey = if isObject: "properties" else: "elements"
  stmts = []
  id = path.scope.generateUidIdentifier(isObject ? "obj" : "arr")~t.clone()~atLoc(getLoc(node)~span(1))

  let i = 0, len = elements.length, bundle = [], first = true, initializer

  while i < len:
    element = elements[i]
    if element~isa("Comprehension"):
      if first:
        now initializer = bundle
        now first = false
      else:
        if bundle.length > 0: pushBundle(info, stmts, id, bundle)
      now bundle = []

      match element:
        | ~isa("LoopComprehension"):
          info~transformLoop(path.get(`${nodeKey}.${i}`), id, stmts)
        | ~isa("CaseComprehension"):
          info~transformCase(path.get(`${nodeKey}.${i}`), id, stmts)
        | else:
          throw new Error("Invalid comprehension node (this is an internal error)")
    else:
      bundle.push(element)

    i++

  if bundle.length > 0: pushBundle(info, stmts, id, bundle)

  initializerLoc = if initializer.length == 0:
    getLoc(node)~span(1)
  else:
    getSurroundingLoc(initializer)

  finalInitializer = if isObject:
    t.objectExpression(initializer)~atLoc(initializerLoc)
  else:
    t.arrayExpression(initializer)~atLoc(initializerLoc)

  path.replaceWith(stmts~iife(id, finalInitializer))

getComprehensionInfo(path, isObject, isLegacy) ->
  { path, isObject, isLegacy }

export transformArrayComprehension(path): void ->
  getComprehensionInfo(path, false, false)~transformComprehension()

export transformObjectComprehension(path): void ->
  getComprehensionInfo(path, true, false)~transformComprehension()

export transformLegacyComprehension(path, isObject): void ->
  // Shim legacy comprehensions onto new model
  { node } = path
  { loop } = node
  if loop:
    delete node.loop
    // TODO: fix babel patch so there's a builder for this...
    node[if isObject: "properties" else: "elements"] = [ {
      type: "LoopComprehension"
      loop
    }~atNode(node) ]
    path.replaceWith(node)
    getComprehensionInfo(path, isObject, true)~transformComprehension()

export transformPlainArrayComprehension(path): void ->
  transformLegacyComprehension(path, false)

export transformPlainObjectComprehension(path): void ->
  transformLegacyComprehension(path, true)
