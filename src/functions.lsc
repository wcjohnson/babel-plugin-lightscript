import is, { isa } from './is'
import { transformTails } from './tails'
import t from './types'
import { toBlockStatement } from './blocks'

import getLoc from 'ast-loc-utils/lib/getLoc'
import atNode from 'ast-loc-utils/lib/placeAtNode'
import atLoc from 'ast-loc-utils/lib/placeAtLoc'

// Add "return" statements to all expressions in tail position inside the
// body of the function at the given Babel traversal path.
export addImplicitReturns(functionPath) ->
  node = functionPath.node
  // Don't add implicit returns to constructors, setters, or :void functions
  if node.kind === "constructor" or node.kind === "set": return
  if is("VoidTypeAnnotation", node.returnType?.typeAnnotation): return

  // Implicit return transformations
  transform(expr, path) ->
    if path~isa("VariableDeclaration"):
      if path.node.declarations.length > 1:
        throw path.buildCodeFrameError("Ambiguous implicit `return` of multiple variables. " + 
          "Add an explicit `return` statement on the next line.")

    t.returnStatement(expr)~atNode(expr)

  transformTails(
    functionPath.get("body")
    false
    false
    transform
  )

// Convert any functional node (NamedArrow etc) back to a JS
// `FunctionDeclaration` or `FunctionExpression`
export toPlainFunction(node) ->
  { id, params, body, generator, async } = node;

  nextNode = match node:
    | ~isa("Statement"):
      t.functionDeclaration(id, params, toBlockStatement(body), generator, async)~atNode(node)
    | else:
      t.functionExpression(id, params, toBlockStatement(body), generator, async)~atNode(node)

  if node.returnType: nextNode.returnType = node.returnType
  if node.typeParameters: nextNode.typeParameters = node.typeParameters

  nextNode

export replaceWithPlainFunction(path) ->
  path.replaceWith(toPlainFunction(path.node))

// Convert any functional node (NamedArrow etc) back to a JS arrow function
// `ArrowFunctionExpression`
export toArrowFunction(node) ->
  let { id, params, body, async } = node
  fn = t.arrowFunctionExpression(params, body, async)~atNode(node)
  if node.returnType: fn.returnType = node.returnType
  if node.typeParameters: fn.typeParameters = node.typeParameters

  if node~isa("Statement"):
    t.variableDeclaration("const",
      [t.variableDeclarator(id, fn)~atNode(node)]
    )~atNode(node)
  else:
    fn

export replaceWithArrowFunction(path) ->
  path.replaceWith(toArrowFunction(path.node))

// Replace a functional node with a new node binding the function to `this`.
export replaceWithBoundFunction(path) ->
  { node } = path
  loc = node~getLoc()
  if path.node~isa("Statement"):
    // function f() {...}
    // f = f.bind(this)
    replaceWithPlainFunction(path)

    assignToBound = t.assignmentExpression("=",
      path.node.id
      t.callExpression(
        t.memberExpression(
          path.node.id
          t.identifier("bind")~atLoc(loc)
        )~atLoc(loc)
        [t.thisExpression()~atLoc(loc)]
      )~atLoc(loc)
    )~atLoc(loc)

    path.insertAfter(assignToBound)
  else:
    // (function f() {...}).bind(this)
    bound = t.callExpression(
      t.memberExpression(
        toPlainFunction(path.node)
        t.identifier("bind")~atLoc(loc)
      )~atLoc(loc)
      [t.thisExpression()~atLoc(loc)]
    )~atLoc(loc)

    path.replaceWith(bound)

export isNamedArrowFunction(node) ->
  // XXX: this seems a bit hackish.
  typeof node.skinny === "boolean"
